pub fn main() !void {
    fnc();
}

// \\ add $0, $0, $0
// \\ add $0, $0, $31
// \\ add $0, $31, $31
// \\ add $31, $31, $31
// \\ sub $0, $0, $0
// \\ sub $31, $31, $31
// \\ or $0, $0, $0
// \\ or $31, $31, $31
// \\ and $0, $0, $0
// \\ and $31, $31, $31
// \\ xor $0, $0, $0
// \\ xor $31, $31, $31
// \\ slt $0, $0, $0
// \\ slt $31, $31, $31
// \\ sll $0, $0, $0
// \\ sll $31, $31, $31
// \\ srl $0, $0, $0
// \\ srl $31, $31, $31
// \\ sra $0, $0, $0
// \\ sra $31, $31, $31
// \\ rotrv $0, $0, $0
// \\ rotrv $31, $31, $31
// \\
// \\ addi $0, $0, 0
// \\ addi $0, $0, 0xffff
// \\ addi $31, $31, 0
// \\ addi $31, $31, 0xffff
// // \\ sub $0, $0, 0
// // \\ sub $0, $0, 0xffff
// // \\ sub $31, $31, 0
// // \\ sub $31, $31, 0xffff
// \\ neg $31, $30
// \\ ori $0, $0, 0
// \\ ori $0, $0, 0xffff
// \\ ori $31, $31, 0
// \\ ori $31, $31, 0xffff
// \\ andi $0, $0, 0
// \\ andi $0, $0, 0xffff
// \\ andi $31, $31, 0
// \\ andi $31, $31, 0xffff

pub noinline fn fnc() void {
    asm volatile (
        \\ add  $2,  $4,  $8
        \\ addi $2,  $4,  -1
        \\ sub  $2,  $4,  $8
        \\ and  $2,  $4,  $8
        \\ or   $2,  $4,  $8
        \\ xor  $2,  $4,  $8
        \\ sll  $2,  $4,  $8
        \\ srl  $2,  $4,  $8
        \\ sra  $2,  $4,  $8
    );
}

